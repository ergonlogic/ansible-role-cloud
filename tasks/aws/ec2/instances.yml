---

- name: Set default EC2 VM states
  set_fact:
    cloud: "{{ cloud | combine( { 'aws': { 'ec2': { item.key : { 'state': ec2_state } } } }, recursive=True ) }}"
  when: item.value.state is undefined
  with_dict: "{{ cloud.aws.ec2 }}"

- name: Ensure the state of existing EC2 VMs
  ec2:
    instance_tags:
      Name: "{{ item.key }}"
    count_tag:
      Name: "{{ item.key }}"
    exact_count: "{{ (item.value.state == 'absent') | ternary(0,1) }}"
    instance_type: "{{ item.value.instance_type | default(ec2_instance_type) }}"
    region: "{{ item.value.region | default(ec2_region) }}"
    image: "{{ item.value.image | default(ec2_image) }}"
    groups: "{{ item.value.groups | default(ec2_groups) }}"
    key_name: "{{ item.value.key_name | default(ec2_key_name) }}"
    wait: "{{ (item.value.state == 'absent') | ternary('no','yes') }}"
  register: managed_ec2_vms
  with_dict: "{{ cloud.aws.ec2 }}"

- name: Add newly created EC2 VMs to cached inventory
  set_fact:
    cached_ec2_vms: "{{ cached_ec2_vms | combine( { item.item.key : item.instances.0.id } ) }}"
  when: cached_ec2_vms[item.item.key] is not defined and item.changed
  with_items: "{{ managed_ec2_vms.results }}"

- name: Add newly created EC2 VMs to groups/inventory
  add_host:
    hostname: "{{ item.item.key }}"
    groups: "all,cloud,ec2,{{ item.item.value.group|default('all') }}"
    ansible_host: "{{ item.instances.0.public_ip }}"
    ansible_ssh_host: "{{ item.instances.0.public_ip }}"
    public_ip: "{{ item.instances.0.public_ip }}"
    ec2_tag_Name: "{{ item.item.key }}"
    status: "{{ item.instances.0.state }}"
  when: item.changed
  with_items: "{{ managed_ec2_vms.results }}"

- name: Wait for SSH to become available on newly created VMs
  wait_for:
    host: "{{ item.instances.0.public_ip }}"
    port: 22
  when: (item.instances is defined) and (item.instances.0.state == 'running')
  with_items: "{{ managed_ec2_vms.results }}"

