---

# TODO: Find a way to skip this. This shouldn't be necessary after admin-users has run, and will fail for users other than the one who created the VM to begin with.
- set_fact:
    ansible_ssh_private_key_file: ~/.ssh/id_rsa
- set_fact:
    ansible_ssh_user: root

- name: Set or update hostname.
  hostname:
    name: "{{ hostvars[item.instance.name].linode_name }}"
  delegate_to: "{{ hostvars[item.instance.name].ansible_host }}"
  when: item.instance.status == 'Running'
  with_items: "{{ existing_linode_vms.results }}"

- name: Update /etc/hostname.
  copy:
    content: "{{ hostvars[item.instance.name].linode_name }}"
    dest: /etc/hostname
    owner: root
    group: root
    mode: 0644
  delegate_to: "{{ hostvars[item.instance.name].ansible_host }}"
  when: item.instance.status == 'Running'
  with_items: "{{ existing_linode_vms.results }}"

- name: Update /etc/hosts with localhost.
  lineinfile:
    dest: /etc/hosts
    regexp: "^127.0.0.1"
    line: "127.0.0.1 {{ hostvars[item.instance.name].linode_name }}.{{ linode_zone }} {{ hostvars[item.instance.name].linode_name }} localhost"
  delegate_to: "{{ hostvars[item.instance.name].ansible_host }}"
  when: item.instance.status == 'Running'
  with_items: "{{ existing_linode_vms.results }}"

- name: Build hosts file on each host, to include each of the *other* hosts.
  lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ hostvars[item[1]].linode_name }}$"
    line: "{{ hostvars[item[1]].public_ip }} {{ hostvars[item][1].linode_name }}.{{ linode_zone }} {{ hostvars[item[1]].linode_name }}"
    state: present
  delegate_to: "{{ hostvars[item[0].instance.name].ansible_host }}"
  when: (item[0].instance.status == 'Running') and (item[1].instance.status == 'Running') and (item[0].instance.name != item[1].instance.name)
  with_nested:
  - "{{ existing_linode_vms.results }}"
  - "{{ existing_linode_vms.results }}"

